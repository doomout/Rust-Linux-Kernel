// Rust의 매크로는 코드의 재사용성을 높이고, 반복적인 코드를 줄여주는 강력한 도구입니다.
// 매크로는 함수와 비슷하지만, 컴파일 타임에 코드가 확장되어 실행됩니다.
// 매크로는 `macro_rules!` 키워드를 사용하여 정의합니다.
// 매크로는 다양한 형태의 인자를 받을 수 있으며, 패턴 매칭을 통해 다양한 상황에 대응할 수 있습니다.
// 매크로는 코드의 가독성을 높이고, 중복을 줄여주는 데 유용합니다.
// 매크로는 함수와 달리 타입을 체크하지 않기 때문에, 잘못된 인자를 전달하면 컴파일 타임에 오류가 발생합니다.
macro_rules! say_hello {
    // 매크로는 패턴을 정의하고, 그에 맞는 코드를 생성합니다.
    // 여기서는 하나의 인자를 받는 패턴을 정의합니다.
    // 매크로는 $ 기호로 시작하는 변수를 사용하여 인자를 받습니다.
    // $name:expr는 expr 타입의 인자를 받는다는 의미입니다.
    // expr은 표현식(expression)을 의미합니다.
    // expr은 Rust에서 가장 일반적인 타입으로, 숫자, 문자열, 변수 등 다양한 값을 가질 수 있습니다.
    ($name:expr) => {
        println!("안녕! {}!", $name);
    };
}

fn main() {
    say_hello!("러스트");
}

/*실행결과
안녕! 러스트! */